Parameters:
  LatestAmiId:
    Description: "AMI for EC2"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  EnvType:
    Description: "Production or Test environment"
    Default: 'test'
    Type: "String"
    AllowedValues:
      - 'test'
      - 'prod'
  GitFolder:
    Default: "q1.0-14-12-22"
    Type: "String"
Resources:
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: eipalloc-03c919700ddd53e16
      InstanceId: !Ref Server
  SecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access via port 22 IPv4 & port 80 IPv4
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTPS IPv4'
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        # - Description: 'Allow HTTP IPv4 IN ON PORT 3000'
        #   IpProtocol: tcp
        #   FromPort: '3000'
        #   ToPort: '3000'
        #   CidrIp: '0.0.0.0/0'
  Server:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT4M
        Count: 1
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - NodeJS
            - StartNodeService
            - ConfigNginx
            - CertBot
        Install:
          packages:
            yum:
              git: []
              nginx: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
                verbose=true
              mode: '000400'
              owner: 'root'
              group: 'root'
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Server.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Server --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: 'root'
              group: 'root'
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        NodeJS:
          commands:
            01stage:
              command: "curl -sL https://rpm.nodesource.com/setup_16.x | sudo bash -"
              cwd: "/home/ec2-user"
            02stage:
              command: "sudo yum install -y nodejs"
              cwd: "/home/ec2-user"
            03stage:
              command: !Sub "git clone https://github.com/richieok/${GitFolder}.git"
              cwd: "/home/ec2-user"
              # ignoreErrors: 'true'
            04stage:
              command: "npm i && npm run build"
              cwd: !Sub "/home/ec2-user/${GitFolder}"
            05stage:
              command: "sudo chmod +x server.js"
              cwd: !Sub "/home/ec2-user/${GitFolder}"
        StartNodeService:
          files:
            /etc/systemd/system/app1.service:
              content: !Sub |
                [Unit]
                Description=Qubit v 1
                After=multi-user.target

                [Service]
                ExecStart=/home/ec2-user/${GitFolder}/server.js
                Restart=always
                RestartSec=10
                StandardOutput=syslog
                StandardError=syslog
                SyslogIdentifier=QubitAppID
                User=ec2-user
                WorkingDirectory=/home/ec2-user/${GitFolder}
                #EnvironmentFile=/home/ec2-user/${GitFolder}/app.env

                [Install]
                WantedBy=multi-user.target
          services:
            systemd:
              app1:
                ensureRunning: "true"
                enabled: "true"
        ConfigNginx:
          files:
            /etc/nginx/conf.d/new_sites.conf:
              content: |
                server {
                  listen 80 default_server;
                  server_name qubit.com.ng www.qubit.com.ng; #change _ to wesite url www url
                  
                  location / {
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_pass http://localhost:3000;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                  }
                }
          services:
            systemd:
              nginx:
                enabled: "true"
                ensureRunning: "true"
        CertBot:
          commands:
            cmd01:
              command: "sudo yum install augeas-libs -y"
            cmd02:
              command: "sudo python3 -m venv /opt/certbot/"
            cmd03:
              command: "sudo /opt/certbot/bin/pip install --upgrade pip"
            cmd04:
              command: "sudo /opt/certbot/bin/pip install certbot certbot-nginx"
            cmd05:
              command: "sudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot"
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref "LatestAmiId"
      SecurityGroupIds: 
        - !Ref SecGroup
      Tags:
        - Key: "Name"
          Value: "Qubit-Server"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          # sudo yum install -y gcc-c++ make
          sudo yum update -y
          sudo amazon-linux-extras install nginx1 -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Server --configsets InstallAndRun --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Server --region ${AWS::Region}
Outputs:
  URL:
    Description: 'Instance URL'
    Value: !Join ['', [ 'http://', !GetAtt [ Server, PublicDnsName ]]]